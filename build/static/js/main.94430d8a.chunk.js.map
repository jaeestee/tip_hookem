{"version":3,"sources":["SignatureScreen/SignatureScreen.tsx","NumberPad/NumberPad.tsx","Test/Test.tsx","index.tsx"],"names":["SignatureScreen","_jsxs","className","children","_jsx","SignatureCanvas","penColor","canvasProps","width","height","NumberPad","_ref","onNumberSelect","inputValue","setInputValue","useState","useEffect","type","value","readOnly","placeholder","map","button","onClick","prevValue","TippingUI","clicked","setClicked","clickedCustom","setClickedCustom","cost","setCost","handleClick","newCost","onChange","useCallback","alert","selectedNumber","setSelectedNumber","onChangeCustom","clickedTimes","Button","number","ReactDOM","render","React","StrictMode","Router","Test","document","getElementById"],"mappings":"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","file":"static/js/main.94430d8a.chunk.js","sourcesContent":["import React from 'react';\nimport SignatureCanvas from 'react-signature-canvas';\nimport './styles.css';\n\nconst SignatureScreen: React.FC = () => {\n  return (\n    <div className=\"all\">\n      <div className=\"text\">Signature</div>\n      <br></br>\n      <SignatureCanvas\n        penColor=\"orange\"\n        canvasProps={{\n          width: '500%',\n          height: '200%',\n          className: 'signature_pad',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SignatureScreen;\n","import React, { useState, useEffect } from 'react';\nimport './styles.css';\n\ninterface NumberPadProps {\n  onNumberSelect: (number: string) => void; // Prop type for the callback function\n}\n\nconst NumberPad: React.FC<NumberPadProps> = ({ onNumberSelect }) => {\n  const [inputValue, setInputValue] = useState(''); // Initialize input value state\n\n  const handleButtonClick = (value: string) => {\n    setInputValue((prevValue) => prevValue + value); // Append clicked value to the inpu\n  };\n\n  useEffect(() => {\n    onNumberSelect(inputValue); // Call the parent function with the updated inputValue\n  }, [inputValue, onNumberSelect]);\n\n  const handleClear = () => {\n    setInputValue(''); // Clear input value\n  };\n\n  return (\n    <div>\n      <div className=\"container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          readOnly\n          className=\"input\"\n          placeholder=\"Enter number\"\n        />\n        <div><br></br></div>\n        <div className=\"pad\">\n          {['1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '0', 'Clear'].map(\n            (button) => (\n              <button\n                key={button}\n                onClick={() => {\n                  button === 'Clear'\n                    ? handleClear()\n                    : handleButtonClick(button);\n                }}\n                className=\"numpadbutton\"\n              >\n                {button}\n              </button>\n            ),\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NumberPad;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { Button } from 'reactstrap';\nimport './styles.css';\nimport { SignatureScreen } from '../SignatureScreen';\nimport { NumberPad } from '../NumberPad';\n\nconst TippingUI: React.FC = () => {\n  const [clicked, setClicked] = useState(false);\n  const [clickedCustom, setClickedCustom] = useState(false);\n  const [cost, setCost] = useState('');\n\n  const handleClick = (newCost: string) => {\n    setCost(newCost); // Update state with the new cost value\n    onChange(); // Trigger onChange with the new cost\n  };\n\n  const onChange = useCallback(() => {\n    setClicked(!clicked);\n    if (clicked) {\n      alert(cost + ` was taken from your BevoBucks Account!`);\n    }\n  }, [setClicked, clicked]);\n\n  const [selectedNumber, setSelectedNumber] = useState('');\n\n  const handleNumberSelect = (number: string) => {\n    setSelectedNumber(number); // Update state with the selected number\n  };\n\n  const onChangeCustom = useCallback(() => {\n    setClickedCustom(!clickedCustom);\n    if (clickedCustom && selectedNumber) {\n      alert('$' + selectedNumber + ` was taken from your BevoBucks Account!`);\n    }\n  }, [setClickedCustom, clickedCustom, selectedNumber]);\n\n  let clickedTimes = 0;\n  const noTipClicked = () => {\n    clickedTimes = clickedTimes + 1;\n    if (clickedTimes == 3) {\n      clickedTimes = 0;\n      alert('MOOOOO! TIP OR GET THE HORNS!');\n    }\n  };\n\n  return (\n    <div className=\"all\">\n      {!clicked && !clickedCustom ? (\n        <div>\n          <div className=\"text\">Leave a tip?</div>\n          <br></br>\n          <Button onClick={() => handleClick('$10')} className=\"button\">\n            15%\n          </Button>{' '}\n          <Button onClick={() => handleClick('$20')} className=\"button\">\n            20%\n          </Button>{' '}\n          <Button onClick={() => handleClick('$40')} className=\"button\">\n            25%\n          </Button>{' '}\n          <br></br>\n          <br></br>\n          <div>\n            <Button onClick={onChangeCustom} className=\"custom_button\">\n              Custom\n            </Button>{' '}\n            <div>\n              <br></br>\n            </div>\n            <Button\n              onClick={() => {\n                noTipClicked();\n              }}\n              className=\"custom_button2\"\n            >\n              No Tip\n            </Button>{' '}\n          </div>\n        </div>\n      ) : null}\n      {clicked ? (\n        <div>\n          <SignatureScreen />\n          <br></br>\n          <br></br>\n          <Button onClick={onChange} className=\"done_button\">\n            Done\n          </Button>\n        </div>\n      ) : null}\n      {clickedCustom ? (\n        <div>\n          <NumberPad onNumberSelect={handleNumberSelect} />\n          <div><br></br></div>\n          <Button onClick={onChangeCustom} className=\"done_button_custom\">\n            Done\n          </Button>\n        </div>\n      ) : null}\n      <div className=\"padding\"></div>\n    </div>\n  );\n};\n\nexport default TippingUI;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Test } from './Test';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Test />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}